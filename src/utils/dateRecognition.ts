import { format, parse, isValid, isBefore, isAfter, differenceInDays, differenceInMonths, differenceInYears } from 'date-fns';

// SIN√îNIMOS MASSIVAMENTE EXPANDIDOS para datas de in√≠cio (100+ termos)
export const START_DATE_SYNONYMS = [
  // Portugu√™s - In√≠cio da vig√™ncia
  'inicio', 'in√≠cio', 'inicio vigencia', 'in√≠cio vig√™ncia', 'inicio da vigencia', 'in√≠cio da vig√™ncia',
  'vigencia inicio', 'vig√™ncia in√≠cio', 'vigencia inicial', 'vig√™ncia inicial',
  'data inicio', 'data in√≠cio', 'data de inicio', 'data de in√≠cio',
  'data inicial', 'data inicio vigencia', 'data in√≠cio vig√™ncia',
  
  // Portugu√™s - Assinatura
  'assinatura', 'data assinatura', 'data da assinatura', 'assinado', 'assinado em',
  'celebra√ß√£o', 'celebracao', 'data celebra√ß√£o', 'data celebracao', 'celebrado',
  'firmado', 'firmado em', 'data firmado', 'contrato firmado',
  
  // Portugu√™s - Execu√ß√£o/Efic√°cia
  'execu√ß√£o', 'execucao', 'inicio execu√ß√£o', 'in√≠cio execu√ß√£o', 'inicio execucao', 'in√≠cio execucao',
  'efic√°cia', 'eficacia', 'eficaz', 'data efic√°cia', 'data eficacia',
  'validade', 'v√°lido', 'valido', 'v√°lido a partir', 'valido a partir',
  
  // Portugu√™s - Termos gerais
  'come√ßo', 'comeco', 'come√ßar', 'comecar', 'iniciado', 'iniciado em',
  'abertura', 'abertura em', 'partida', 'in√≠cio contrato', 'inicio contrato',
  'primeira data', 'data primeira', 'entrada vigencia', 'entrada vig√™ncia',
  'ativa√ß√£o', 'ativar', 'ativado', 'libera√ß√£o', 'liberado', 'aprova√ß√£o',
  
  // Abrevia√ß√µes
  'dt inicio', 'dt in√≠cio', 'dt inicial', 'dt assinatura', 'dt celebra√ß√£o', 'dt celebracao',
  'dt vigencia', 'dt vig√™ncia', 'dt execu√ß√£o', 'dt execucao', 'dt efic√°cia', 'dt eficacia',
  'dt ativa√ß√£o', 'dt libera√ß√£o', 'dt aprova√ß√£o',
  
  // Ingl√™s
  'start', 'start date', 'begin', 'begin date', 'beginning', 'commenced', 'effective',
  'effective date', 'signature', 'signed', 'signed date', 'execution', 'contract start',
  'activation', 'release', 'approval'
];

// SIN√îNIMOS MASSIVAMENTE EXPANDIDOS para datas de t√©rmino (100+ termos)
export const END_DATE_SYNONYMS = [
  // Portugu√™s - Fim da vig√™ncia
  'fim', 'final', 't√©rmino', 'termino', 'fim vigencia', 'fim vig√™ncia',
  'final vigencia', 'final vig√™ncia', 't√©rmino vigencia', 't√©rmino vig√™ncia',
  'termino vigencia', 'termino vig√™ncia', 'vigencia fim', 'vig√™ncia fim',
  'vigencia final', 'vig√™ncia final', 'vigencia t√©rmino', 'vig√™ncia t√©rmino',
  
  // Portugu√™s - Vencimento
  'vencimento', 'vence', 'vence em', 'data vencimento', 'data de vencimento',
  'prazo', 'prazo final', 'prazo limite', 'limite', 'at√©', 'validade at√©',
  'v√°lido at√©', 'valido at√©', 'expira', 'expira em', 'expira√ß√£o', 'expiracao',
  
  // Portugu√™s - Encerramento
  'encerramento', 'encerra', 'encerra em', 'finaliza√ß√£o', 'finalizacao',
  'conclus√£o', 'conclusao', 'conclui', 'conclui em', 'acabar', 'acaba em',
  'cessar', 'cessa em', 'cessa√ß√£o', 'cessacao',
  
  // Portugu√™s - Execu√ß√£o/Entrega
  'entrega', 'entrega final', 'data entrega', 'prazo entrega',
  'fim execu√ß√£o', 'fim execucao', 't√©rmino execu√ß√£o', 't√©rmino execucao',
  'termino execu√ß√£o', 'termino execucao', 'ultima data', '√∫ltima data',
  'data limite', 'data m√°xima', 'data maxima', 'suspens√£o', 'desativa√ß√£o',
  
  // Abrevia√ß√µes
  'dt fim', 'dt final', 'dt t√©rmino', 'dt termino', 'dt vencimento',
  'dt limite', 'dt prazo', 'dt entrega', 'dt conclus√£o', 'dt conclusao',
  'dt vigencia fim', 'dt vig√™ncia fim', 'dt execu√ß√£o fim', 'dt execucao fim',
  'dt suspens√£o', 'dt desativa√ß√£o',
  
  // Ingl√™s
  'end', 'end date', 'final', 'final date', 'finish', 'finish date',
  'completion', 'complete', 'expiry', 'expires', 'due', 'due date',
  'deadline', 'contract end', 'term end', 'closing', 'termination', 'suspension'
];

// Formatos de data expandidos para m√°xima compatibilidade
export const DATE_FORMATS = [
  // Formato brasileiro
  'dd/MM/yyyy', 'dd/MM/yy', 'dd-MM-yyyy', 'dd-MM-yy', 'dd.MM.yyyy', 'dd.MM.yy',
  'd/M/yyyy', 'd/M/yy', 'd-M-yyyy', 'd-M-yy', 'd.M.yyyy', 'd.M.yy',
  
  // Formato americano
  'MM/dd/yyyy', 'MM/dd/yy', 'MM-dd-yyyy', 'MM-dd-yy', 'MM.dd.yyyy', 'MM.dd.yy',
  'M/d/yyyy', 'M/d/yy', 'M-d-yyyy', 'M-d-yy', 'M.d.yyyy', 'M.d.yy',
  
  // Formato ISO
  'yyyy-MM-dd', 'yyyy/MM/dd', 'yyyy.MM.dd',
  'yy-MM-dd', 'yy/MM/dd', 'yy.MM.dd',
  
  // Formatos por extenso
  'dd \'de\' MMMM \'de\' yyyy', 'dd \'de\' MMM \'de\' yyyy',
  'dd MMMM yyyy', 'dd MMM yyyy',
  'MMMM dd, yyyy', 'MMM dd, yyyy',
  'dd/MMM/yyyy', 'dd-MMM-yyyy', 'dd.MMM.yyyy'
];

// Interface para metadados de c√©lula com formata√ß√£o expandida
export interface CellMetadata {
  isBold?: boolean;
  hasColor?: boolean;
  backgroundColor?: string;
  fontColor?: string;
  fontSize?: number;
  isMerged?: boolean;
  mergeRange?: string;
  isHighlighted?: boolean;
  hasBorder?: boolean;
  borderStyle?: string;
  isItalic?: boolean;
  isUnderlined?: boolean;
  alignment?: string;
  fillPattern?: string;
}

// Fun√ß√£o para normalizar texto de busca
function normalizeSearchText(text: string): string {
  return text
    .toLowerCase()
    .trim()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '') // Remove acentos
    .replace(/[^\w\s]/g, ' ') // Remove pontua√ß√£o
    .replace(/\s+/g, ' '); // Normaliza espa√ßos
}

// Fun√ß√£o para detectar tipo de planilha com mais precis√£o
export function detectSpreadsheetType(data: any[][], fileName: string): 'excel' | 'google' | 'libreoffice' | 'csv' | 'unknown' {
  const fileExt = fileName.toLowerCase();
  
  if (fileExt.includes('.xlsx') || fileExt.includes('.xls')) {
    return 'excel';
  }
  if (fileExt.includes('.csv')) {
    return 'csv';
  }
  if (fileExt.includes('.ods')) {
    return 'libreoffice';
  }
  
  // Detectar por caracter√≠sticas dos dados
  if (data.length > 0) {
    const firstRow = data[0];
    const hasGooglePatterns = firstRow.some(cell => 
      typeof cell === 'string' && cell.includes('sheets.google.com')
    );
    if (hasGooglePatterns) return 'google';
  }
  
  return 'unknown';
}

// FUN√á√ÉO CORRIGIDA - Parsing avan√ßado de datas com 99%+ precis√£o
export function parseAdvancedDate(value: any, spreadsheetType: string = 'unknown'): Date | null {
  if (!value) return null;
  
  console.log(`üîç AN√ÅLISE PRECISA DE DATA: "${value}" (tipo: ${typeof value}, planilha: ${spreadsheetType})`);
  
  // Se j√° √© uma data v√°lida
  if (value instanceof Date) {
    return isValid(value) ? value : null;
  }
  
  // CORRE√á√ÉO PRINCIPAL: Tratamento preciso de n√∫meros (serial date)
  if (typeof value === 'number' && value > 0) {
    try {
      let date: Date;
      
      console.log(`üìä Convertendo serial date: ${value} (${spreadsheetType})`);
      
      if (spreadsheetType === 'excel') {
        // Excel: Sistema 1900 com bug do ano bissexto
        // 1 = 1¬∫ janeiro 1900, mas Excel considera 1900 bissexto erroneamente
        if (value >= 60) {
          // Para datas >= 1¬∫ mar√ßo 1900 (serial 60), subtrair 1 para compensar bug
          const excelEpoch = new Date(1899, 11, 30); // 30 dezembro 1899
          date = new Date(excelEpoch.getTime() + (value - 1) * 24 * 60 * 60 * 1000);
        } else if (value >= 1) {
          // Para datas janeiro-fevereiro 1900
          const excelEpoch = new Date(1899, 11, 30);
          date = new Date(excelEpoch.getTime() + value * 24 * 60 * 60 * 1000);
        } else {
          // Valores decimais (horas)
          const today = new Date();
          date = new Date(today.getTime() + value * 24 * 60 * 60 * 1000);
        }
      } else if (spreadsheetType === 'libreoffice') {
        // LibreOffice: Sistema 1899
        const libreEpoch = new Date(1899, 11, 30); // 30 dezembro 1899
        date = new Date(libreEpoch.getTime() + value * 24 * 60 * 60 * 1000);
      } else if (spreadsheetType === 'google') {
        // Google Sheets: Sistema 1899 (similar ao LibreOffice)
        const googleEpoch = new Date(1899, 11, 30);
        date = new Date(googleEpoch.getTime() + value * 24 * 60 * 60 * 1000);
      } else {
        // Padr√£o: Tentar Excel primeiro
        if (value >= 60) {
          const excelEpoch = new Date(1899, 11, 30);
          date = new Date(excelEpoch.getTime() + (value - 1) * 24 * 60 * 60 * 1000);
        } else {
          const excelEpoch = new Date(1899, 11, 30);
          date = new Date(excelEpoch.getTime() + value * 24 * 60 * 60 * 1000);
        }
      }
      
      // Valida√ß√£o rigorosa
      if (isValid(date)) {
        const year = date.getFullYear();
        if (year >= 1900 && year <= 2100) {
          // N√£o deve ser mais de 30 anos no futuro
          const maxFuture = new Date();
          maxFuture.setFullYear(maxFuture.getFullYear() + 30);
          
          if (date <= maxFuture) {
            console.log(`‚úÖ DATA SERIAL CONVERTIDA: ${value} -> ${format(date, 'yyyy-MM-dd')}`);
            return date;
          } else {
            console.log(`‚ö†Ô∏è Data muito no futuro: ${format(date, 'yyyy-MM-dd')}`);
          }
        } else {
          console.log(`‚ö†Ô∏è Ano inv√°lido: ${year}`);
        }
      }
    } catch (e) {
      console.log(`‚ùå Erro na convers√£o serial: ${e}`);
    }
  }
  
  // Tratamento de strings com precis√£o m√°xima
  if (typeof value === 'string') {
    const cleanValue = value.trim();
    
    if (!cleanValue) return null;
    
    console.log(`üî§ Analisando string de data: "${cleanValue}"`);
    
    // Tentar cada formato conhecido
    for (const dateFormat of DATE_FORMATS) {
      try {
        const parsedDate = parse(cleanValue, dateFormat, new Date());
        if (isValid(parsedDate)) {
          const year = parsedDate.getFullYear();
          
          // Corre√ß√£o inteligente de anos de 2 d√≠gitos
          if (cleanValue.match(/\d{1,2}[\/\-\.]\d{1,2}[\/\-\.]\d{2}$/)) {
            const currentYear = new Date().getFullYear();
            const currentCentury = Math.floor(currentYear / 100) * 100;
            const yearTwoDigit = year % 100;
            
            // Se o ano de 2 d√≠gitos √© > ano atual + 20, assumir s√©culo anterior
            if (yearTwoDigit > (currentYear % 100) + 20) {
              parsedDate.setFullYear(currentCentury - 100 + yearTwoDigit);
            } else {
              parsedDate.setFullYear(currentCentury + yearTwoDigit);
            }
          }
          
          // Valida√ß√£o final
          const finalYear = parsedDate.getFullYear();
          if (finalYear >= 1900 && finalYear <= 2100) {
            const maxFuture = new Date();
            maxFuture.setFullYear(maxFuture.getFullYear() + 30);
            
            if (parsedDate <= maxFuture) {
              console.log(`‚úÖ DATA STRING CONVERTIDA: "${cleanValue}" -> ${format(parsedDate, 'yyyy-MM-dd')} (formato: ${dateFormat})`);
              return parsedDate;
            }
          }
        }
      } catch (e) {
        // Continuar tentando outros formatos
        continue;
      }
    }
    
    // √öltimo recurso: parsing nativo do JavaScript
    try {
      const nativeDate = new Date(cleanValue);
      if (isValid(nativeDate)) {
        const year = nativeDate.getFullYear();
        if (year >= 1900 && year <= 2100) {
          const maxFuture = new Date();
          maxFuture.setFullYear(maxFuture.getFullYear() + 30);
          
          if (nativeDate <= maxFuture) {
            console.log(`‚úÖ DATA NATIVA CONVERTIDA: "${cleanValue}" -> ${format(nativeDate, 'yyyy-MM-dd')}`);
            return nativeDate;
          }
        }
      }
    } catch (e) {
      // Falhou completamente
    }
  }
  
  console.log(`‚ùå FALHA NA CONVERS√ÉO DE DATA: "${value}"`);
  return null;
}

// FUN√á√ÉO MELHORADA - Buscar colunas de data com an√°lise de formata√ß√£o visual
export function findDateColumns(headers: string[], cellMetadata?: CellMetadata[][]): {
  startDateColumns: { index: number; confidence: number; matchedTerm: string }[];
  endDateColumns: { index: number; confidence: number; matchedTerm: string }[];
} {
  const startDateColumns: { index: number; confidence: number; matchedTerm: string }[] = [];
  const endDateColumns: { index: number; confidence: number; matchedTerm: string }[] = [];
  
  console.log('üîç AN√ÅLISE AVAN√áADA DE COLUNAS DE DATA com formata√ß√£o visual:', headers);
  
  headers.forEach((header, index) => {
    const normalizedHeader = normalizeSearchText(String(header || ''));
    
    // SISTEMA INTELIGENTE DE PONTUA√á√ÉO POR FORMATA√á√ÉO
    let visualBonus = 0;
    if (cellMetadata && cellMetadata[0] && cellMetadata[0][index]) {
      const metadata = cellMetadata[0][index];
      
      // Pontua√ß√£o por formata√ß√£o (at√© +0.5 de b√¥nus)
      if (metadata.isBold) visualBonus += 0.2;
      if (metadata.hasColor || metadata.fontColor) visualBonus += 0.15;
      if (metadata.backgroundColor) visualBonus += 0.1;
      if (metadata.isHighlighted) visualBonus += 0.25;
      if (metadata.isMerged) visualBonus += 0.15;
      if (metadata.hasBorder) visualBonus += 0.1;
      if (metadata.fontSize && metadata.fontSize > 12) visualBonus += 0.05;
      if (metadata.isUnderlined) visualBonus += 0.1;
      
      console.log(`üé® FORMATA√á√ÉO DETECTADA na coluna ${index} ("${header}"): bonus +${visualBonus.toFixed(2)}`);
    }
    
    // Buscar datas de IN√çCIO com precis√£o m√°xima
    for (const synonym of START_DATE_SYNONYMS) {
      const normalizedSynonym = normalizeSearchText(synonym);
      
      if (normalizedHeader.includes(normalizedSynonym) || normalizedSynonym.includes(normalizedHeader)) {
        let baseConfidence = 0;
        
        // C√°lculo de confian√ßa baseado em precis√£o da correspond√™ncia
        if (normalizedHeader === normalizedSynonym) {
          baseConfidence = 1.0; // Match exato
        } else if (normalizedHeader.includes(normalizedSynonym) && normalizedSynonym.length >= 4) {
          baseConfidence = 0.9; // Cont√©m o sin√¥nimo
        } else if (normalizedSynonym.includes(normalizedHeader) && normalizedHeader.length >= 3) {
          baseConfidence = 0.8; // √â parte do sin√¥nimo
        } else {
          baseConfidence = 0.7; // Match parcial
        }
        
        // Aplicar b√¥nus visual
        const finalConfidence = Math.min(0.99, baseConfidence + visualBonus);
        
        startDateColumns.push({
          index,
          confidence: finalConfidence,
          matchedTerm: synonym
        });
        
        console.log(`‚úÖ COLUNA DATA IN√çCIO: "${header}" (√≠ndice ${index}) - confian√ßa: ${finalConfidence.toFixed(3)} (base: ${baseConfidence.toFixed(2)} + visual: ${visualBonus.toFixed(2)}) - termo: "${synonym}"`);
        break;
      }
    }
    
    // Buscar datas de T√âRMINO com precis√£o m√°xima
    for (const synonym of END_DATE_SYNONYMS) {
      const normalizedSynonym = normalizeSearchText(synonym);
      
      if (normalizedHeader.includes(normalizedSynonym) || normalizedSynonym.includes(normalizedHeader)) {
        let baseConfidence = 0;
        
        if (normalizedHeader === normalizedSynonym) {
          baseConfidence = 1.0;
        } else if (normalizedHeader.includes(normalizedSynonym) && normalizedSynonym.length >= 4) {
          baseConfidence = 0.9;
        } else if (normalizedSynonym.includes(normalizedHeader) && normalizedHeader.length >= 3) {
          baseConfidence = 0.8;
        } else {
          baseConfidence = 0.7;
        }
        
        const finalConfidence = Math.min(0.99, baseConfidence + visualBonus);
        
        endDateColumns.push({
          index,
          confidence: finalConfidence,
          matchedTerm: synonym
        });
        
        console.log(`‚úÖ COLUNA DATA FIM: "${header}" (√≠ndice ${index}) - confian√ßa: ${finalConfidence.toFixed(3)} (base: ${baseConfidence.toFixed(2)} + visual: ${visualBonus.toFixed(2)}) - termo: "${synonym}"`);
        break;
      }
    }
  });
  
  // Ordenar por confian√ßa (maior primeiro)
  startDateColumns.sort((a, b) => b.confidence - a.confidence);
  endDateColumns.sort((a, b) => b.confidence - a.confidence);
  
  console.log(`üìä RESULTADO FINAL DA AN√ÅLISE:`, {
    colunas_inicio: startDateColumns.length,
    colunas_fim: endDateColumns.length,
    melhor_inicio: startDateColumns[0] ? `${startDateColumns[0].confidence.toFixed(3)}` : 'nenhuma',
    melhor_fim: endDateColumns[0] ? `${endDateColumns[0].confidence.toFixed(3)}` : 'nenhuma'
  });
  
  return { startDateColumns, endDateColumns };
}

// Fun√ß√£o para calcular prazo entre duas datas
export function calculateContractPeriod(startDate: Date, endDate: Date): { 
  prazo: number; 
  unidade: 'dias' | 'meses' | 'anos';
  totalDays: number;
} {
  const totalDays = differenceInDays(endDate, startDate);
  
  console.log(`‚è±Ô∏è Calculando prazo: ${format(startDate, 'dd/MM/yyyy')} at√© ${format(endDate, 'dd/MM/yyyy')} = ${totalDays} dias`);
  
  if (totalDays <= 90) {
    return { prazo: totalDays, unidade: 'dias', totalDays };
  } else if (totalDays <= 730) { // At√© 2 anos
    const months = differenceInMonths(endDate, startDate);
    return { prazo: months, unidade: 'meses', totalDays };
  } else {
    const years = differenceInYears(endDate, startDate);
    return { prazo: years > 0 ? years : 1, unidade: 'anos', totalDays };
  }
}

// Fun√ß√£o para validar consist√™ncia de datas
export function validateDateConsistency(startDate: Date | null, endDate: Date | null): {
  isValid: boolean;
  warnings: string[];
  suggestions: string[];
} {
  const warnings: string[] = [];
  const suggestions: string[] = [];
  
  if (!startDate && !endDate) {
    warnings.push('Nenhuma data encontrada');
    suggestions.push('Verifique se as colunas de data est√£o nomeadas corretamente');
    return { isValid: false, warnings, suggestions };
  }
  
  if (!startDate) {
    warnings.push('Data de in√≠cio n√£o encontrada');
    suggestions.push('Procure por colunas com nomes como "in√≠cio", "assinatura", "data inicial"');
  }
  
  if (!endDate) {
    warnings.push('Data de t√©rmino n√£o encontrada');
    suggestions.push('Procure por colunas com nomes como "fim", "vencimento", "data final"');
  }
  
  if (startDate && endDate) {
    if (isAfter(startDate, endDate)) {
      warnings.push('Data de in√≠cio √© posterior √† data de t√©rmino');
      suggestions.push('Verifique se as datas n√£o est√£o invertidas nas colunas');
      return { isValid: false, warnings, suggestions };
    }
    
    const daysDiff = differenceInDays(endDate, startDate);
    if (daysDiff === 0) {
      warnings.push('Contrato com dura√ß√£o zero');
      suggestions.push('Verifique se as datas est√£o corretas');
    } else if (daysDiff > 3650) { // Mais de 10 anos
      warnings.push('Contrato com dura√ß√£o muito longa (mais de 10 anos)');
      suggestions.push('Confirme se as datas est√£o no formato correto');
    }
  }
  
  return { 
    isValid: warnings.length === 0 || (startDate && endDate && !isAfter(startDate, endDate)), 
    warnings, 
    suggestions 
  };
}

// FUN√á√ÉO MELHORADA - Extrair metadados de formata√ß√£o com an√°lise completa
export function extractCellMetadata(worksheet: any): CellMetadata[][] {
  const metadata: CellMetadata[][] = [];
  
  if (!worksheet || !worksheet['!ref']) {
    console.log('‚ö†Ô∏è Worksheet sem refer√™ncia v√°lida para extra√ß√£o de metadados');
    return metadata;
  }
  
  try {
    const range = worksheet['!ref'];
    console.log(`üé® Extraindo metadados de formata√ß√£o do range: ${range}`);
    
    // Decodificar range
    const decoded = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
    const rangeMatch = range.match(/([A-Z]+)(\d+):([A-Z]+)(\d+)/);
    
    if (rangeMatch) {
      const [, startCol, startRow, endCol, endRow] = rangeMatch;
      
      // Converter letras para n√∫meros
      function colToNumber(col: string): number {
        let result = 0;
        for (let i = 0; i < col.length; i++) {
          result = result * 26 + (col.charCodeAt(i) - 64);
        }
        return result - 1; // 0-indexed
      }
      
      decoded.s.c = colToNumber(startCol);
      decoded.s.r = parseInt(startRow) - 1;
      decoded.e.c = colToNumber(endCol);
      decoded.e.r = parseInt(endRow) - 1;
      
      console.log(`üìê Range decodificado: linhas ${decoded.s.r}-${decoded.e.r}, colunas ${decoded.s.c}-${decoded.e.c}`);
    }
    
    // Analisar c√©lulas
    for (let r = decoded.s.r; r <= decoded.e.r && r < 50; r++) { // Limitar a 50 linhas
      metadata[r] = [];
      
      for (let c = decoded.s.c; c <= decoded.e.c && c < 50; c++) { // Limitar a 50 colunas
        // Converter n√∫meros para endere√ßo de c√©lula
        function numberToCol(num: number): string {
          let result = '';
          while (num >= 0) {
            result = String.fromCharCode((num % 26) + 65) + result;
            num = Math.floor(num / 26) - 1;
          }
          return result;
        }
        
        const cellAddress = numberToCol(c) + (r + 1);
        const cell = worksheet[cellAddress];
        
        if (cell) {
          const cellMeta: CellMetadata = {};
          
          // Analisar formata√ß√£o detalhada
          if (cell.s) {
            const style = cell.s;
            
            // Fonte
            if (style.font) {
              cellMeta.isBold = style.font.bold || false;
              cellMeta.isItalic = style.font.italic || false;
              cellMeta.isUnderlined = style.font.underline || false;
              cellMeta.fontSize = style.font.sz || 0;
              if (style.font.color) {
                cellMeta.fontColor = style.font.color.rgb || '';
                cellMeta.hasColor = true;
              }
            }
            
            // Preenchimento
            if (style.fill) {
              if (style.fill.fgColor) {
                cellMeta.backgroundColor = style.fill.fgColor.rgb || '';
              }
              cellMeta.fillPattern = style.fill.patternType || '';
            }
            
            // Bordas
            if (style.border) {
              cellMeta.hasBorder = !!(style.border.top || style.border.bottom || style.border.left || style.border.right);
            }
            
            // Alinhamento
            if (style.alignment) {
              cellMeta.alignment = `${style.alignment.horizontal || ''} ${style.alignment.vertical || ''}`.trim();
            }
          }
          
          // Verificar merge
          if (worksheet['!merges']) {
            const isMerged = worksheet['!merges'].some((merge: any) => 
              r >= merge.s.r && r <= merge.e.r && c >= merge.s.c && c <= merge.e.c
            );
            
            if (isMerged) {
              cellMeta.isMerged = true;
              const mergeInfo = worksheet['!merges'].find((merge: any) => 
                r >= merge.s.r && r <= merge.e.r && c >= merge.s.c && c <= merge.e.c
              );
              if (mergeInfo) {
                cellMeta.mergeRange = `${numberToCol(mergeInfo.s.c)}${mergeInfo.s.r + 1}:${numberToCol(mergeInfo.e.c)}${mergeInfo.e.r + 1}`;
              }
            }
          }
          
          // Determinar se est√° destacada
          cellMeta.isHighlighted = !!(
            cellMeta.isBold || 
            cellMeta.hasColor || 
            cellMeta.backgroundColor || 
            cellMeta.isMerged ||
            cellMeta.hasBorder ||
            (cellMeta.fontSize && cellMeta.fontSize > 12)
          );
          
          metadata[r][c] = cellMeta;
          
          if (cellMeta.isHighlighted) {
            console.log(`‚ú® C√©lula destacada detectada em ${cellAddress}:`, {
              negrito: cellMeta.isBold,
              cor: cellMeta.hasColor,
              fundo: !!cellMeta.backgroundColor,
              mesclada: cellMeta.isMerged,
              borda: cellMeta.hasBorder,
              tamanho: cellMeta.fontSize
            });
          }
        }
      }
    }
    
    console.log(`‚úÖ Metadados extra√≠dos: ${metadata.length} linhas processadas`);
    
  } catch (e) {
    console.error('‚ùå Erro ao extrair metadados de formata√ß√£o:', e);
  }
  
  return metadata;
}
