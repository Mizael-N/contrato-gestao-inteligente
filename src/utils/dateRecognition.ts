
import { format, parse, isValid, isBefore, isAfter, differenceInDays, differenceInMonths, differenceInYears } from 'date-fns';

// Sin√¥nimos massivamente expandidos para datas de in√≠cio
export const START_DATE_SYNONYMS = [
  // Portugu√™s - In√≠cio da vig√™ncia
  'inicio', 'in√≠cio', 'inicio vigencia', 'in√≠cio vig√™ncia', 'inicio da vigencia', 'in√≠cio da vig√™ncia',
  'vigencia inicio', 'vig√™ncia in√≠cio', 'vigencia inicial', 'vig√™ncia inicial',
  'data inicio', 'data in√≠cio', 'data de inicio', 'data de in√≠cio',
  'data inicial', 'data inicio vigencia', 'data in√≠cio vig√™ncia',
  
  // Portugu√™s - Assinatura
  'assinatura', 'data assinatura', 'data da assinatura', 'assinado', 'assinado em',
  'celebra√ß√£o', 'celebracao', 'data celebra√ß√£o', 'data celebracao', 'celebrado',
  'firmado', 'firmado em', 'data firmado', 'contrato firmado',
  
  // Portugu√™s - Execu√ß√£o/Efic√°cia
  'execu√ß√£o', 'execucao', 'inicio execu√ß√£o', 'in√≠cio execu√ß√£o', 'inicio execucao', 'in√≠cio execucao',
  'efic√°cia', 'eficacia', 'eficaz', 'data efic√°cia', 'data eficacia',
  'validade', 'v√°lido', 'valido', 'v√°lido a partir', 'valido a partir',
  
  // Portugu√™s - Termos gerais
  'come√ßo', 'comeco', 'come√ßar', 'comecar', 'iniciado', 'iniciado em',
  'abertura', 'abertura em', 'partida', 'in√≠cio contrato', 'inicio contrato',
  
  // Abrevia√ß√µes
  'dt inicio', 'dt in√≠cio', 'dt inicial', 'dt assinatura', 'dt celebra√ß√£o', 'dt celebracao',
  'dt vigencia', 'dt vig√™ncia', 'dt execu√ß√£o', 'dt execucao', 'dt efic√°cia', 'dt eficacia',
  
  // Ingl√™s
  'start', 'start date', 'begin', 'begin date', 'beginning', 'commenced', 'effective',
  'effective date', 'signature', 'signed', 'signed date', 'execution', 'contract start'
];

// Sin√¥nimos massivamente expandidos para datas de t√©rmino
export const END_DATE_SYNONYMS = [
  // Portugu√™s - Fim da vig√™ncia
  'fim', 'final', 't√©rmino', 'termino', 'fim vigencia', 'fim vig√™ncia',
  'final vigencia', 'final vig√™ncia', 't√©rmino vigencia', 't√©rmino vig√™ncia',
  'termino vigencia', 'termino vig√™ncia', 'vigencia fim', 'vig√™ncia fim',
  'vigencia final', 'vig√™ncia final', 'vigencia t√©rmino', 'vig√™ncia t√©rmino',
  
  // Portugu√™s - Vencimento
  'vencimento', 'vence', 'vence em', 'data vencimento', 'data de vencimento',
  'prazo', 'prazo final', 'prazo limite', 'limite', 'at√©', 'validade at√©',
  'v√°lido at√©', 'valido at√©', 'expira', 'expira em', 'expira√ß√£o', 'expiracao',
  
  // Portugu√™s - Encerramento
  'encerramento', 'encerra', 'encerra em', 'finaliza√ß√£o', 'finalizacao',
  'conclus√£o', 'conclusao', 'conclui', 'conclui em', 'acabar', 'acaba em',
  'cessar', 'cessa em', 'cessa√ß√£o', 'cessacao',
  
  // Portugu√™s - Execu√ß√£o/Entrega
  'entrega', 'entrega final', 'data entrega', 'prazo entrega',
  'fim execu√ß√£o', 'fim execucao', 't√©rmino execu√ß√£o', 't√©rmino execucao',
  'termino execu√ß√£o', 'termino execucao',
  
  // Abrevia√ß√µes
  'dt fim', 'dt final', 'dt t√©rmino', 'dt termino', 'dt vencimento',
  'dt limite', 'dt prazo', 'dt entrega', 'dt conclus√£o', 'dt conclusao',
  'dt vigencia fim', 'dt vig√™ncia fim', 'dt execu√ß√£o fim', 'dt execucao fim',
  
  // Ingl√™s
  'end', 'end date', 'final', 'final date', 'finish', 'finish date',
  'completion', 'complete', 'expiry', 'expires', 'due', 'due date',
  'deadline', 'contract end', 'term end', 'closing'
];

// Formatos de data conhecidos para parsing
export const DATE_FORMATS = [
  // Formato brasileiro
  'dd/MM/yyyy', 'dd/MM/yy', 'dd-MM-yyyy', 'dd-MM-yy', 'dd.MM.yyyy', 'dd.MM.yy',
  'd/M/yyyy', 'd/M/yy', 'd-M-yyyy', 'd-M-yy', 'd.M.yyyy', 'd.M.yy',
  
  // Formato americano
  'MM/dd/yyyy', 'MM/dd/yy', 'MM-dd-yyyy', 'MM-dd-yy', 'MM.dd.yyyy', 'MM.dd.yy',
  'M/d/yyyy', 'M/d/yy', 'M-d-yyyy', 'M-d-yy', 'M.d.yyyy', 'M.d.yy',
  
  // Formato ISO
  'yyyy-MM-dd', 'yyyy/MM/dd', 'yyyy.MM.dd',
  'yy-MM-dd', 'yy/MM/dd', 'yy.MM.dd',
  
  // Formatos por extenso (parcial)
  'dd \'de\' MMMM \'de\' yyyy', 'dd \'de\' MMM \'de\' yyyy',
  'dd MMMM yyyy', 'dd MMM yyyy',
  'MMMM dd, yyyy', 'MMM dd, yyyy'
];

// Fun√ß√£o para normalizar texto de busca
function normalizeSearchText(text: string): string {
  return text
    .toLowerCase()
    .trim()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '') // Remove acentos
    .replace(/[^\w\s]/g, ' ') // Remove pontua√ß√£o
    .replace(/\s+/g, ' '); // Normaliza espa√ßos
}

// Fun√ß√£o para detectar tipo de planilha
export function detectSpreadsheetType(data: any[][], fileName: string): 'excel' | 'google' | 'libreoffice' | 'csv' | 'unknown' {
  const fileExt = fileName.toLowerCase();
  
  if (fileExt.includes('.xlsx') || fileExt.includes('.xls')) {
    return 'excel';
  }
  if (fileExt.includes('.csv')) {
    return 'csv';
  }
  if (fileExt.includes('.ods')) {
    return 'libreoffice';
  }
  
  // Detectar por caracter√≠sticas dos dados
  if (data.length > 0) {
    const firstRow = data[0];
    // Google Sheets √†s vezes tem caracter√≠sticas espec√≠ficas
    const hasGooglePatterns = firstRow.some(cell => 
      typeof cell === 'string' && cell.includes('sheets.google.com')
    );
    if (hasGooglePatterns) return 'google';
  }
  
  return 'unknown';
}

// Fun√ß√£o avan√ßada para parsing de datas
export function parseAdvancedDate(value: any, spreadsheetType: string = 'unknown'): Date | null {
  if (!value) return null;
  
  console.log(`üîç Analisando data: "${value}" (tipo: ${typeof value}, planilha: ${spreadsheetType})`);
  
  // Se j√° √© uma data v√°lida
  if (value instanceof Date) {
    return isValid(value) ? value : null;
  }
  
  // Se √© n√∫mero (serial date do Excel/LibreOffice)
  if (typeof value === 'number' && value > 0) {
    try {
      let date: Date;
      
      if (spreadsheetType === 'excel') {
        // Excel: 1 = 1 de janeiro de 1900 (mas Excel considera 1900 bissexto erroneamente)
        // Ajustar para essa peculiaridade
        const excelEpoch = new Date(1899, 11, 30); // 30 de dezembro de 1899
        date = new Date(excelEpoch.getTime() + value * 24 * 60 * 60 * 1000);
      } else if (spreadsheetType === 'libreoffice') {
        // LibreOffice: 1 = 30 de dezembro de 1899
        const libreEpoch = new Date(1899, 11, 30);
        date = new Date(libreEpoch.getTime() + (value - 1) * 24 * 60 * 60 * 1000);
      } else {
        // Tentar Excel por padr√£o
        const excelEpoch = new Date(1899, 11, 30);
        date = new Date(excelEpoch.getTime() + value * 24 * 60 * 60 * 1000);
      }
      
      if (isValid(date) && date.getFullYear() > 1900 && date.getFullYear() < 2100) {
        console.log(`üìÖ Data serial convertida: ${value} -> ${format(date, 'yyyy-MM-dd')}`);
        return date;
      }
    } catch (e) {
      console.log(`‚ö†Ô∏è Erro ao converter data serial: ${e}`);
    }
  }
  
  // Se √© string, tentar v√°rios formatos
  if (typeof value === 'string') {
    const cleanValue = value.trim();
    
    if (!cleanValue) return null;
    
    // Tentar formatos conhecidos
    for (const dateFormat of DATE_FORMATS) {
      try {
        const parsedDate = parse(cleanValue, dateFormat, new Date());
        if (isValid(parsedDate)) {
          // Validar se a data faz sentido
          const year = parsedDate.getFullYear();
          if (year >= 1900 && year <= 2100) {
            // Verificar se n√£o √© muito no futuro (mais de 20 anos)
            const maxFuture = new Date();
            maxFuture.setFullYear(maxFuture.getFullYear() + 20);
            
            if (parsedDate <= maxFuture) {
              console.log(`üìÖ Data parseada com formato "${dateFormat}": "${cleanValue}" -> ${format(parsedDate, 'yyyy-MM-dd')}`);
              return parsedDate;
            }
          }
        }
      } catch (e) {
        // Continuar tentando outros formatos
      }
    }
    
    // Tentar parsing nativo do JavaScript como √∫ltimo recurso
    try {
      const nativeDate = new Date(cleanValue);
      if (isValid(nativeDate) && nativeDate.getFullYear() > 1900 && nativeDate.getFullYear() < 2100) {
        const maxFuture = new Date();
        maxFuture.setFullYear(maxFuture.getFullYear() + 20);
        
        if (nativeDate <= maxFuture) {
          console.log(`üìÖ Data parseada nativamente: "${cleanValue}" -> ${format(nativeDate, 'yyyy-MM-dd')}`);
          return nativeDate;
        }
      }
    } catch (e) {
      // Falhou em todas as tentativas
    }
  }
  
  console.log(`‚ùå N√£o foi poss√≠vel converter a data: "${value}"`);
  return null;
}

// Fun√ß√£o para buscar colunas de data com score de confian√ßa
export function findDateColumns(headers: string[]): {
  startDateColumns: { index: number; confidence: number; matchedTerm: string }[];
  endDateColumns: { index: number; confidence: number; matchedTerm: string }[];
} {
  const startDateColumns: { index: number; confidence: number; matchedTerm: string }[] = [];
  const endDateColumns: { index: number; confidence: number; matchedTerm: string }[] = [];
  
  console.log('üîç Analisando cabe√ßalhos para encontrar colunas de data:', headers);
  
  headers.forEach((header, index) => {
    const normalizedHeader = normalizeSearchText(String(header || ''));
    
    // Buscar datas de in√≠cio
    for (const synonym of START_DATE_SYNONYMS) {
      const normalizedSynonym = normalizeSearchText(synonym);
      
      if (normalizedHeader.includes(normalizedSynonym) || normalizedSynonym.includes(normalizedHeader)) {
        const confidence = normalizedHeader === normalizedSynonym ? 1.0 : 
                          normalizedHeader.includes(normalizedSynonym) ? 0.8 : 0.6;
        
        startDateColumns.push({
          index,
          confidence,
          matchedTerm: synonym
        });
        
        console.log(`‚úÖ Coluna de data IN√çCIO encontrada: "${header}" (√≠ndice ${index}, confian√ßa ${confidence}) - termo: "${synonym}"`);
        break; // Parar na primeira correspond√™ncia para evitar duplicatas
      }
    }
    
    // Buscar datas de t√©rmino
    for (const synonym of END_DATE_SYNONYMS) {
      const normalizedSynonym = normalizeSearchText(synonym);
      
      if (normalizedHeader.includes(normalizedSynonym) || normalizedSynonym.includes(normalizedHeader)) {
        const confidence = normalizedHeader === normalizedSynonym ? 1.0 : 
                          normalizedHeader.includes(normalizedSynonym) ? 0.8 : 0.6;
        
        endDateColumns.push({
          index,
          confidence,
          matchedTerm: synonym
        });
        
        console.log(`‚úÖ Coluna de data FIM encontrada: "${header}" (√≠ndice ${index}, confian√ßa ${confidence}) - termo: "${synonym}"`);
        break; // Parar na primeira correspond√™ncia para evitar duplicatas
      }
    }
  });
  
  // Ordenar por confian√ßa (maior primeiro)
  startDateColumns.sort((a, b) => b.confidence - a.confidence);
  endDateColumns.sort((a, b) => b.confidence - a.confidence);
  
  console.log(`üìä Resultado da busca:`, {
    inicio: startDateColumns.length,
    fim: endDateColumns.length
  });
  
  return { startDateColumns, endDateColumns };
}

// Fun√ß√£o para calcular prazo entre duas datas
export function calculateContractPeriod(startDate: Date, endDate: Date): { 
  prazo: number; 
  unidade: 'dias' | 'meses' | 'anos';
  totalDays: number;
} {
  const totalDays = differenceInDays(endDate, startDate);
  
  console.log(`‚è±Ô∏è Calculando prazo: ${format(startDate, 'dd/MM/yyyy')} at√© ${format(endDate, 'dd/MM/yyyy')} = ${totalDays} dias`);
  
  if (totalDays <= 90) {
    return { prazo: totalDays, unidade: 'dias', totalDays };
  } else if (totalDays <= 730) { // At√© 2 anos
    const months = differenceInMonths(endDate, startDate);
    return { prazo: months, unidade: 'meses', totalDays };
  } else {
    const years = differenceInYears(endDate, startDate);
    return { prazo: years > 0 ? years : 1, unidade: 'anos', totalDays };
  }
}

// Fun√ß√£o para validar consist√™ncia de datas
export function validateDateConsistency(startDate: Date | null, endDate: Date | null): {
  isValid: boolean;
  warnings: string[];
  suggestions: string[];
} {
  const warnings: string[] = [];
  const suggestions: string[] = [];
  
  if (!startDate && !endDate) {
    warnings.push('Nenhuma data encontrada');
    suggestions.push('Verifique se as colunas de data est√£o nomeadas corretamente');
    return { isValid: false, warnings, suggestions };
  }
  
  if (!startDate) {
    warnings.push('Data de in√≠cio n√£o encontrada');
    suggestions.push('Procure por colunas com nomes como "in√≠cio", "assinatura", "data inicial"');
  }
  
  if (!endDate) {
    warnings.push('Data de t√©rmino n√£o encontrada');
    suggestions.push('Procure por colunas com nomes como "fim", "vencimento", "data final"');
  }
  
  if (startDate && endDate) {
    if (isAfter(startDate, endDate)) {
      warnings.push('Data de in√≠cio √© posterior √† data de t√©rmino');
      suggestions.push('Verifique se as datas n√£o est√£o invertidas nas colunas');
      return { isValid: false, warnings, suggestions };
    }
    
    const daysDiff = differenceInDays(endDate, startDate);
    if (daysDiff === 0) {
      warnings.push('Contrato com dura√ß√£o zero');
      suggestions.push('Verifique se as datas est√£o corretas');
    } else if (daysDiff > 3650) { // Mais de 10 anos
      warnings.push('Contrato com dura√ß√£o muito longa (mais de 10 anos)');
      suggestions.push('Confirme se as datas est√£o no formato correto');
    }
  }
  
  return { 
    isValid: warnings.length === 0 || (startDate && endDate && !isAfter(startDate, endDate)), 
    warnings, 
    suggestions 
  };
}
